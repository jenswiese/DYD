<?php

namespace Dyd\Changelog;

use \Dyd\Util\Database;
use \Dyd\Changelog\ChangelogTable;

/**
 * Test class for Changeset.
 * Generated by PHPUnit on 2011-10-17 at 22:00:47.
 */
class ChangelogTableTest extends \PHPUnit_Framework_TestCase
{
    public function testGetChangelogNames()
    {
        $expectedNames = array('Test1', 'Test2', 'Test3');
        $testChangelog = array(
            array('name' => 'Test1', 'rollback_sql' => '', 'created_at' => ''),
            array('name' => 'Test2', 'rollback_sql' => '', 'created_at' => ''),
            array('name' => 'Test3', 'rollback_sql' => '', 'created_at' => '')
        );
        $databaseMock = $this->getDatabaseMock('retrieveChangelogs', $testChangelog);
        $changelog = new ChangelogTable($databaseMock);
        $changelogNames = $changelog->getChangelogNames();

        $this->assertEquals($expectedNames, $changelogNames, 'Expected changelog names did not match.');
    }

    public function testGetChangelog()
    {
        $changelogData = array(
            'name' => 'Test1',
            'rollback_sql' => 'DELETE 1;',
            'created_at' => '2011-12-31 00:00:00'
        );
        $databaseMock = $this->getDatabaseMock('retrieveChangelogByName', $changelogData);
        $changelog = new ChangelogTable($databaseMock);
        $changelogEntry = $changelog->getChangelog($changelogData['name']);

        $this->assertInstanceOf('\Dyd\Changelog\ChangelogEntry', $changelogEntry, "Expected class 'ChangelogEntry'.");
        $this->assertEquals($changelogEntry->getName(), $changelogData['name']);
        $this->assertEquals($changelogEntry->getRollbackSql(), $changelogData['rollback_sql']);
        $this->assertEquals($changelogEntry->getCreatedAt(), $changelogData['created_at']);
    }

    public function testNotExistingChangelog()
    {
        $databaseMock = $this->getDatabaseMock('retrieveChangelogByName', array());
        $changelog = new ChangelogTable($databaseMock);

        try {
            $changelog->getChangelog('does_not_exist');
        } catch (\Exception $e) {
            $this->assertEquals("No changelog entry with name 'does_not_exist'.", $e->getMessage());
            return;
        }

        $this->fail('Trying to get undefined changelog should cause an exception.');
    }

    /**
     * Returns Database mock
     *
     * @param string $method
     * @param string $returnValue
     * @return Database
     */
    protected function getDatabaseMock($method, $returnValue)
    {
        $databaseMock = $this->getMockBuilder('\Dyd\Util\Database')
                ->disableOriginalConstructor()
                ->getMock();

        $databaseMock->expects($this->any())
            ->method($method)
            ->will($this->returnValue($returnValue));

        return $databaseMock;
    }
}
