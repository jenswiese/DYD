<?php

namespace Dyd\Changeset;

use \Dyd\Changeset\ChangesetIndexFile;

/**
 * Test class for ChangesetIndex.
 * Generated by PHPUnit on 2011-09-22 at 22:37:06.
 */
class ChangesetIndexFileTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Tests getting of changeset entries
     *
     * @return void
     */
    public function testGetChangesetNames()
    {
        $expectedChangesetNames = array('TestChangeset1', 'TestChangeset2', 'TestChangeset3');
        $filesystemMock = $this->getFilesystemMock(implode("\n", $expectedChangesetNames));
        $changesetIndex = new ChangesetIndexFile('test.index', $filesystemMock);

        $actualChangesetNames = $changesetIndex->getChangesetNames();

        $this->assertEquals($expectedChangesetNames, $actualChangesetNames);
    }

    /**
     * Tests getting of changeset entries
     *
     * @return void
     */
    public function testGetChangesetNamesWithDuplicateEntries()
    {
        $expectedChangesetNames = array('TestChangeset1', 'TestChangeset1');
        $filesystemMock = $this->getFilesystemMock(implode("\n", $expectedChangesetNames));
        $changesetIndex = new ChangesetIndexFile('test.index', $filesystemMock);

        try {
            $changesetIndex->getChangesetNames();
        } catch (\Exception $e) {
            $this->assertEquals(
                "Could not read index due to duplicate entries.",
                $e->getMessage(),
                'Duplicate entries in index-file should cause appropriate exception'
            );
            return;
        }

        $this->fail('Duplicate entries in index-file should cause exception.');
    }

    /**
     * Tests getting of changeset entries
     *
     * @return void
     */
    public function testGetChangesetNamesWithEmptyEntry()
    {
        $expectedChangesetNames = array('TestChangeset1', '');
        $filesystemMock = $this->getFilesystemMock(implode("\n", $expectedChangesetNames));
        $changesetIndex = new ChangesetIndexFile('test.index', $filesystemMock);

        try {
            $changesetIndex->getChangesetNames();
        } catch (\Exception $e) {
            $this->assertEquals(
                "Could not read index due to empty entry.",
                $e->getMessage(),
                'Empty entry in index-file should cause appropriate exception'
            );
            return;
        }

        $this->fail('Empty entry in index-file should cause exception.');
    }

    /**
     * Sets up mock of filesystem, defines filecontent as well
     *
     * @param string $fileContent
     * @return \Dyd\Util\Filesystem $mockedFilesystem
     */
    private function getFilesystemMock($fileContent)
    {
        $filesystem = $this->getMockBuilder('\Dyd\Util\Filesystem')
            ->disableOriginalConstructor()
            ->getMock();

        $filesystem
            ->expects($this->any())
            ->method('readFromFile')
            ->will($this->returnValue($fileContent));

        return $filesystem;
    }
}
