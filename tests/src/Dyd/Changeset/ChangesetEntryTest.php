<?php

namespace Dyd\Changeset;

use Dyd\Changeset\ChangesetEntry;

/**
 * Test class for ChangesetEntry.
 * Generated by PHPUnit on 2011-09-23 at 22:49:59.
 */
class ChangesetEntryTest extends \PHPUnit_Framework_TestCase
{
    public function testCreateChangeset()
    {
        $fileContent = <<< EOF
SELECT 1;
--//@UNDO
DELETE 1
EOF;

        $filesystemMock = $this->getFilesystemMock($fileContent);

        $actualChangeset = new ChangesetEntry('TestChangeset.sql', $filesystemMock);

        $this->assertEquals('TestChangeset.sql', $actualChangeset->getName());
        $this->assertEquals('SELECT 1;', $actualChangeset->getChangeSql());
        $this->assertEquals('DELETE 1;', $actualChangeset->getRollbackSql());
    }

    public function testCreateChangesetFromEmptyFile()
    {
        $fileContent = '';

        $filesystemMock = $this->getFilesystemMock($fileContent);

        try {
            new ChangesetEntry('TestChangeset.sql', $filesystemMock);
        } catch (\Exception $e) {
            $this->assertEquals(
                'Could not read form file - it is empty.',
                $e->getMessage(),
                'Empty file should cause appropriate exception.'
            );
            return;
        }

        $this->fail('Empty file should throw exception.');
    }

//    public function testCreateChangesetWithEmptySqlNode()
//    {
//        $filesystemStub = $this->getMock('Dyd\lib\Util\Filesystem');
//        $filesystemStub
//            ->expects($this->any())
//            ->method('readFromFile')
//            ->will($this->returnValue($this->getTestChangesetXml('', '')));
//
//        try {
//            $actualChangeset = new ChangesetEntry('TestChangeset1', $filesystemStub);
//        } catch (Exception $e) {
//            $this->assertEquals(
//                "Node '/changeset/sql' is empty.",
//                $e->getMessage(),
//                'Empty sql-node should cause appropriate exception.'
//            );
//            return;
//        }
//
//        $this->fail('Empty file should throw exception.');
//    }

    public function testTrimmingOfSqlString()
    {
        $fileContent = <<< EOF

 SELECT 1;

--//@UNDO

 DELETE 1;

EOF;

        $filesystemMock = $this->getFilesystemMock($fileContent);

        $actualChangeset = new ChangesetEntry('TestChangeset.sql', $filesystemMock);

        $this->assertEquals('TestChangeset.sql', $actualChangeset->getName());
        $this->assertEquals('SELECT 1;', $actualChangeset->getChangeSql());
        $this->assertEquals('DELETE 1;', $actualChangeset->getRollbackSql());
    }

    /**
     * Sets up mock of filesystem, defines filecontent as well
     *
     * @param string $fileContent
     * @return \Dyd\Util\Filesystem $mockedFilesystem
     */
    private function getFilesystemMock($fileContent)
    {
        $filesystem = $this->getMockBuilder('\Dyd\Util\Filesystem')
            ->disableOriginalConstructor()
            ->getMock();

        $filesystem
            ->expects($this->any())
            ->method('readFromFile')
            ->will($this->returnValue($fileContent));

        return $filesystem;
    }
}

